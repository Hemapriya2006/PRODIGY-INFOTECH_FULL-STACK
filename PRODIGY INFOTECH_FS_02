app.py

from flask import Flask, render_template, request, redirect, session, url_for, flash
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3

app = Flask(__name__)
app.secret_key = 'supersecretkey'

# Initialize the database
def init_db():
    conn = sqlite3.connect('employees.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        role TEXT DEFAULT 'admin'
    )''')
    c.execute('''CREATE TABLE IF NOT EXISTS employees (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        email TEXT NOT NULL,
        position TEXT NOT NULL,
        salary REAL NOT NULL
    )''')
    conn.commit()
    conn.close()

@app.route('/')
def index():
    return redirect('/login')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        confirm = request.form['confirm']
        if password != confirm:
            flash("Passwords do not match.")
            return redirect('/register')
        hashed_pw = generate_password_hash(password)
        conn = sqlite3.connect('employees.db')
        c = conn.cursor()
        try:
            c.execute('INSERT INTO users (username, password) VALUES (?, ?)', (username, hashed_pw))
            conn.commit()
            flash("Registered successfully. You can now log in.")
            return redirect('/login')
        except sqlite3.IntegrityError:
            flash("Username already exists.")
            return redirect('/register')
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        conn = sqlite3.connect('employees.db')
        c = conn.cursor()
        c.execute('SELECT * FROM users WHERE username = ?', (username,))
        user = c.fetchone()
        conn.close()
        if user and check_password_hash(user[2], password):
            session['user'] = username
            return redirect('/dashboard')
        else:
            flash("Invalid username or password.")
    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    if 'user' not in session:
        return redirect('/login')
    conn = sqlite3.connect('employees.db')
    c = conn.cursor()
    c.execute('SELECT * FROM employees')
    employees = c.fetchall()
    conn.close()
    return render_template('dashboard.html', employees=employees, user=session['user'])

@app.route('/add', methods=['GET', 'POST'])
def add():
    if 'user' not in session:
        return redirect('/login')
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        position = request.form['position']
        salary = request.form['salary']
        conn = sqlite3.connect('employees.db')
        c = conn.cursor()
        c.execute('INSERT INTO employees (name, email, position, salary) VALUES (?, ?, ?, ?)',
                  (name, email, position, salary))
        conn.commit()
        conn.close()
        flash("Employee added successfully.")
        return redirect('/dashboard')
    return render_template('add.html')

@app.route('/edit/<int:id>', methods=['GET', 'POST'])
def edit(id):
    if 'user' not in session:
        return redirect('/login')
    conn = sqlite3.connect('employees.db')
    c = conn.cursor()
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        position = request.form['position']
        salary = request.form['salary']
        c.execute('UPDATE employees SET name=?, email=?, position=?, salary=? WHERE id=?',
                  (name, email, position, salary, id))
        conn.commit()
        conn.close()
        flash("Employee updated successfully.")
        return redirect('/dashboard')
    c.execute('SELECT * FROM employees WHERE id=?', (id,))
    emp = c.fetchone()
    conn.close()
    return render_template('edit.html', emp=emp)

@app.route('/delete/<int:id>')
def delete(id):
    if 'user' not in session:
        return redirect('/login')
    conn = sqlite3.connect('employees.db')
    c = conn.cursor()
    c.execute('DELETE FROM employees WHERE id=?', (id,))
    conn.commit()
    conn.close()
    flash("Employee deleted successfully.")
    return redirect('/dashboard')

@app.route('/logout')
def logout():
    session.pop('user', None)
    return redirect('/login')

if __name__ == '__main__':
    init_db()
    app.run(debug=True)

add.html

<!DOCTYPE html>
<html>
<head>
  <title>Add Employee</title>
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
  <h2>Add Employee</h2>
  <form method="post">
    <input type="text" name="name" placeholder="Name" required><br>
    <input type="email" name="email" placeholder="Email" required><br>
    <input type="text" name="position" placeholder="Position" required><br>
    <input type="number" name="salary" placeholder="Salary" required><br>
    <button type="submit">Add</button>
  </form>
  <a href="/dashboard">Back</a>
</body>
</html>

dashboard.html

<!DOCTYPE html>
<html>
<head>
  <title>Dashboard</title>
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
  <h2>Welcome, {{ user }}</h2>
  <a href="/logout">Logout</a>
  <h3>Employee Records</h3>
  <a href="/add">Add Employee</a>
  {% with messages = get_flashed_messages() %}
    {% if messages %}
      <ul class="flash">{% for message in messages %}<li>{{ message }}</li>{% endfor %}</ul>
    {% endif %}
  {% endwith %}
  <table>
    <tr><th>ID</th><th>Name</th><th>Email</th><th>Position</th><th>Salary</th><th>Actions</th></tr>
    {% for emp in employees %}
    <tr>
      <td>{{ emp[0] }}</td><td>{{ emp[1] }}</td><td>{{ emp[2] }}</td><td>{{ emp[3] }}</td><td>{{ emp[4] }}</td>
      <td><a href="/edit/{{ emp[0] }}">Edit</a> | <a href="/delete/{{ emp[0] }}">Delete</a></td>
    </tr>
    {% endfor %}
  </table>
</body>
</html>


edit.html

<!DOCTYPE html>
<html>
<head>
  <title>Edit Employee</title>
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
  <h2>Edit Employee</h2>
  <form method="post">
    <input type="text" name="name" value="{{ emp[1] }}" required><br>
    <input type="email" name="email" value="{{ emp[2] }}" required><br>
    <input type="text" name="position" value="{{ emp[3] }}" required><br>
    <input type="number" name="salary" value="{{ emp[4] }}" required><br>
    <button type="submit">Update</button>
  </form>
  <a href="/dashboard">Cancel</a>
</body>
</html>

login.html

<!DOCTYPE html>
<html>
<head>
  <title>Login</title>
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
  <h2>Login</h2>
  {% with messages = get_flashed_messages() %}
    {% if messages %}
      <ul class="flash">{% for message in messages %}<li>{{ message }}</li>{% endfor %}</ul>
    {% endif %}
  {% endwith %}
  <form method="post">
    <input type="text" name="username" placeholder="Username" required><br>
    <input type="password" name="password" placeholder="Password" required><br>
    <button type="submit">Login</button>
  </form>
  <a href="/register">New user? Register</a>
</body>
</html>

register.html

<!DOCTYPE html>
<html>
<head>
  <title>Register</title>
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
  <h2>Register</h2>
  {% with messages = get_flashed_messages() %}
    {% if messages %}
      <ul class="flash">{% for message in messages %}<li>{{ message }}</li>{% endfor %}</ul>
    {% endif %}
  {% endwith %}
  <form method="post">
    <input type="text" name="username" placeholder="Username" required><br>
    <input type="password" name="password" placeholder="Password" required><br>
    <input type="password" name="confirm" placeholder="Confirm Password" required><br>
    <button type="submit">Register</button>
  </form>
  <a href="/login">Already have an account? Login</a>
</body>
</html>

style.css

body {
  font-family: Arial, sans-serif;
  background: #f9f9f9;
  text-align: center;
  padding: 20px;
}

form {
  display: inline-block;
  background: #fff;
  padding: 25px;
  border-radius: 8px;
  box-shadow: 0 0 10px gray;
}

input, button {
  display: block;
  margin: 10px auto;
  padding: 10px;
  width: 200px;
}

table {
  margin: 20px auto;
  border-collapse: collapse;
  width: 90%;
}

th, td {
  padding: 10px;
  border: 1px solid #ccc;
}

.flash {
  color: red;
  list-style-type: none;
}

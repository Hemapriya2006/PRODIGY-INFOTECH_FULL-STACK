app.py

from flask import Flask, render_template, request, redirect, url_for, session, send_from_directory
from werkzeug.utils import secure_filename
import os, sqlite3
from datetime import datetime

app = Flask(__name__)
app.secret_key = 'socialsecretkey'
UPLOAD_FOLDER = 'static/uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

DB = 'social.db'

def init_db():
    with sqlite3.connect(DB) as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT UNIQUE,
                        password TEXT,
                        profile_pic TEXT)''')

        c.execute('''CREATE TABLE IF NOT EXISTS posts (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        content TEXT,
                        image TEXT,
                        created_at TEXT)''')

        c.execute('''CREATE TABLE IF NOT EXISTS comments (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        post_id INTEGER,
                        user_id INTEGER,
                        comment TEXT,
                        created_at TEXT)''')

        c.execute('''CREATE TABLE IF NOT EXISTS likes (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        post_id INTEGER,
                        user_id INTEGER)''')

        c.execute('''CREATE TABLE IF NOT EXISTS follows (
                        follower_id INTEGER,
                        followed_id INTEGER)''')

@app.route('/')
def index():
    if 'user_id' not in session:
        return redirect('/login')
    with sqlite3.connect(DB) as conn:
        c = conn.cursor()
        c.execute('''SELECT posts.id, users.username, users.profile_pic, posts.content, posts.image, posts.created_at, posts.user_id
                     FROM posts JOIN users ON posts.user_id = users.id ORDER BY posts.id DESC''')
        posts = c.fetchall()
        post_data = []
        for post in posts:
            post_id = post[0]
            c.execute('SELECT COUNT(*) FROM likes WHERE post_id = ?', (post_id,))
            likes = c.fetchone()[0]
            c.execute('''SELECT comments.comment, users.username FROM comments
                         JOIN users ON comments.user_id = users.id
                         WHERE comments.post_id = ?''', (post_id,))
            comments = c.fetchall()
            post_data.append(post + (likes, comments))
    return render_template('home.html', posts=post_data, user_id=session['user_id'])

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        file = request.files.get('profile_pic')
        profile_pic = None
        if file and file.filename:
            filename = secure_filename(file.filename)
            file.save(os.path.join(UPLOAD_FOLDER, filename))
            profile_pic = f"/static/uploads/{filename}"
        with sqlite3.connect(DB) as conn:
            c = conn.cursor()
            try:
                c.execute('INSERT INTO users (username, password, profile_pic) VALUES (?, ?, ?)',
                          (username, password, profile_pic))
                return redirect('/login')
            except:
                return "Username already exists."
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        with sqlite3.connect(DB) as conn:
            c = conn.cursor()
            c.execute('SELECT id FROM users WHERE username = ? AND password = ?', (username, password))
            user = c.fetchone()
            if user:
                session['user_id'] = user[0]
                return redirect('/')
            else:
                return "Invalid login"
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect('/login')

@app.route('/post', methods=['GET', 'POST'])
def post():
    if 'user_id' not in session:
        return redirect('/login')
    if request.method == 'POST':
        content = request.form['content']
        file = request.files.get('media')
        image = None
        if file and file.filename:
            filename = secure_filename(file.filename)
            file.save(os.path.join(UPLOAD_FOLDER, filename))
            image = f"/static/uploads/{filename}"
        with sqlite3.connect(DB) as conn:
            c = conn.cursor()
            c.execute('INSERT INTO posts (user_id, content, image, created_at) VALUES (?, ?, ?, ?)',
                      (session['user_id'], content, image, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        return redirect('/')
    return render_template('post.html')

@app.route('/edit_post/<int:post_id>', methods=['GET', 'POST'])
def edit_post(post_id):
    if 'user_id' not in session:
        return redirect('/login')
    with sqlite3.connect(DB) as conn:
        c = conn.cursor()
        if request.method == 'POST':
            content = request.form['content']
            c.execute('UPDATE posts SET content = ? WHERE id = ? AND user_id = ?', (content, post_id, session['user_id']))
            return redirect('/')
        c.execute('SELECT content FROM posts WHERE id = ? AND user_id = ?', (post_id, session['user_id']))
        post = c.fetchone()
    return render_template('edit_post.html', post=post, post_id=post_id)

@app.route('/delete_post/<int:post_id>')
def delete_post(post_id):
    if 'user_id' in session:
        with sqlite3.connect(DB) as conn:
            c = conn.cursor()
            c.execute('DELETE FROM posts WHERE id = ? AND user_id = ?', (post_id, session['user_id']))
    return redirect('/')

@app.route('/like/<int:post_id>')
def like(post_id):
    if 'user_id' in session:
        with sqlite3.connect(DB) as conn:
            c = conn.cursor()
            c.execute('SELECT * FROM likes WHERE post_id = ? AND user_id = ?', (post_id, session['user_id']))
            if not c.fetchone():
                c.execute('INSERT INTO likes (post_id, user_id) VALUES (?, ?)', (post_id, session['user_id']))
    return redirect('/')

@app.route('/comment/<int:post_id>', methods=['POST'])
def comment(post_id):
    if 'user_id' in session:
        comment = request.form['comment']
        with sqlite3.connect(DB) as conn:
            c = conn.cursor()
            c.execute('INSERT INTO comments (post_id, user_id, comment, created_at) VALUES (?, ?, ?, ?)',
                      (post_id, session['user_id'], comment, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    return redirect('/')

@app.route('/trending')
def trending():
    with sqlite3.connect(DB) as conn:
        c = conn.cursor()
        c.execute('''SELECT posts.id, users.username, users.profile_pic, posts.content, posts.image, posts.created_at,
                     COUNT(likes.id) as like_count FROM posts
                     JOIN users ON posts.user_id = users.id
                     LEFT JOIN likes ON posts.id = likes.post_id
                     GROUP BY posts.id ORDER BY like_count DESC LIMIT 10''')
        posts = c.fetchall()
        post_data = []
        for post in posts:
            post_id = post[0]
            c.execute('''SELECT comments.comment, users.username FROM comments
                         JOIN users ON comments.user_id = users.id
                         WHERE comments.post_id = ?''', (post_id,))
            comments = c.fetchall()
            post_data.append(post + (comments,))
    return render_template('trending.html', posts=post_data)

@app.route('/follow/<int:user_id>')
def follow(user_id):
    if 'user_id' in session and session['user_id'] != user_id:
        with sqlite3.connect(DB) as conn:
            c = conn.cursor()
            c.execute('SELECT * FROM follows WHERE follower_id = ? AND followed_id = ?', (session['user_id'], user_id))
            if not c.fetchone():
                c.execute('INSERT INTO follows (follower_id, followed_id) VALUES (?, ?)', (session['user_id'], user_id))
    return redirect('/')

@app.route('/unfollow/<int:user_id>')
def unfollow(user_id):
    if 'user_id' in session:
        with sqlite3.connect(DB) as conn:
            c = conn.cursor()
            c.execute('DELETE FROM follows WHERE follower_id = ? AND followed_id = ?', (session['user_id'], user_id))
    return redirect('/')

if __name__ == '__main__':
    init_db()
    app.run(debug=True)

edit_post.html

<!DOCTYPE html>
<html>
<head>
    <title>Edit Post - Social App</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <h2>Edit Your Post</h2>
        <form method="POST">
            <textarea name="content" rows="4" required>{{ post[0] }}</textarea>
            <button type="submit">Update</button>
        </form>
    </div>
</body>
</html>

home.html

<!DOCTYPE html>
<html>
<head>
    <title>Social App - Home</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <h1>Welcome to Social App</h1>
        <a href="/post">New Post</a> | 
        <a href="/trending">Trending</a> |
        <a href="/logout">Logout</a>

        {% for post in posts %}
        <div class="post">
            <h3>{{ post[1] }} {% if user_id != post[6] %} 
                <a href="/follow/{{ post[6] }}">Follow</a>
            {% else %} (You) {% endif %}</h3>

            {% if post[2] %}
            <img src="{{ post[2] }}" class="profile-pic">
            {% endif %}

            <p>{{ post[3] }}</p>

            {% if post[4] %}
                {% if post[4].endswith('.mp4') %}
                <div class="video-wrapper">
                    <video controls>
                        <source src="{{ post[4] }}" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                </div>
                {% else %}
                <img src="{{ post[4] }}" class="post-img">
                {% endif %}
            {% endif %}

            <p><small>{{ post[5] }}</small></p>

            <p><a href="/like/{{ post[0] }}"> {{ post[7] }}</a></p>

            {% if user_id == post[6] %}
            <p><a href="/edit_post/{{ post[0] }}">Edit</a> | 
               <a href="/delete_post/{{ post[0] }}">Delete</a></p>
            {% endif %}

            <div class="comments">
                <form action="/comment/{{ post[0] }}" method="post">
                    <input name="comment" placeholder="Add a comment" required>
                    <button type="submit">Comment</button>
                </form>
                {% for comment in post[8] %}
                <p><b>{{ comment[1] }}:</b> {{ comment[0] }}</p>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
    </div>
</body>
</html>


login.html

<!DOCTYPE html>
<html>
<head>
    <title>Login - Social App</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <h2>Login</h2>
        <form method="POST">
            <input type="text" name="username" placeholder="Username" required>
            <input type="password" name="password" placeholder="Password" required>
            <button type="submit">Login</button>
        </form>
        <p>Don't have an account? <a href="/register">Register here</a></p>
    </div>
</body>
</html>

post.html

<!DOCTYPE html>
<html>
<head>
    <title>New Post - Social App</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <h2>Create a New Post</h2>
        <form method="POST" enctype="multipart/form-data">
            <textarea name="content" placeholder="What's on your mind?" rows="4" required></textarea>
            <label>Upload Image/Video:</label><br>
            <input type="file" name="media" accept="image/*,video/*">
            <button type="submit">Post</button>
        </form>
    </div>
</body>
</html>

register.html

<!DOCTYPE html>
<html>
<head>
    <title>Register - Social App</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <h2>Create an Account</h2>
        <form method="POST" enctype="multipart/form-data">
            <input type="text" name="username" placeholder="Username" required>
            <input type="password" name="password" placeholder="Password" required>
            <label>Upload Profile Picture:</label><br>
            <input type="file" name="profile_pic" accept="image/*">
            <button type="submit">Register</button>
        </form>
        <p>Already have an account? <a href="/login">Login here</a></p>
    </div>
</body>
</html>

trending.html

<!DOCTYPE html>
<html>
<head>
    <title>Trending Posts - Social App</title>
    <link rel="stylesheet" href="/static/style.css">
</head>
<body>
    <div class="container">
        <h1> Trending Posts</h1>
        <a href="/">⬅ Back to Home</a>

        {% for post in posts %}
        <div class="post">
            <div class="post-header">
                <h3>{{ post[1] }}</h3>
                {% if post[2] %}
                <img src="{{ post[2] }}" class="profile-pic" alt="Profile Picture">
                {% endif %}
            </div>

            <div class="post-content">
                <p>{{ post[3] }}</p>

                {% if post[4] %}
                    {% if post[4].endswith('.mp4') %}
                    <div class="video-wrapper">
                        <video controls width="100%">
                            <source src="{{ post[4] }}" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    </div>
                    {% else %}
                    <img src="{{ post[4] }}" class="post-img" alt="Post Media">
                    {% endif %}
                {% endif %}

                <p class="timestamp">{{ post[5] }}</p>
                <p><strong> {{ post[6] }} Likes</strong></p>
            </div>

            <div class="comments">
                <h4>💬 Comments</h4>
                {% for comment in post[7] %}
                <p><b>{{ comment[1] }}:</b> {{ comment[0] }}</p>
                {% else %}
                <p>No comments yet.</p>
                {% endfor %}
            </div>
        </div>
        {% else %}
        <p>No trending posts available.</p>
        {% endfor %}
    </div>
</body>
</html>

style.css

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f0f2f5;
    margin: 0;
    padding: 20px;
}

a {
    color: #007bff;
    text-decoration: none;
    margin: 0 10px;
}

a:hover {
    text-decoration: underline;
}

h1, h2, h3 {
    color: #333;
}

.post {
    background-color: #fff;
    border-radius: 10px;
    padding: 20px;
    margin-bottom: 20px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.profile-pic {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    margin-bottom: 10px;
}

.post-img, .post-video {
    max-width: 100%;
    border-radius: 10px;
    margin-top: 15px;
}

textarea, input[type="text"], input[type="password"] {
    width: 90%;
    padding: 10px;
    margin: 8px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
}

button {
    padding: 10px 20px;
    background-color: #28a745;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 10px;
}

button:hover {
    background-color: #218838;
}

.comments {
    margin-top: 20px;
    padding-top: 10px;
    border-top: 1px solid #ddd;
}

.comments p {
    font-size: 14px;
    margin: 5px 0;
}

input[type="file"] {
    margin-top: 10px;
}

.container {
    max-width: 800px;
    margin: auto;
}

.video-wrapper {
    margin-top: 15px;
}

.video-wrapper video {
    width: 100%;
    border-radius: 10px;
}
